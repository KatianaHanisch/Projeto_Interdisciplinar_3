// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 Int     @id @default(autoincrement())
  email              String  @unique
  name               String
  password           String
  phone              String
  verification_email Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Emprestimos            Emprestimos[]
  Reservas               Reservas[]
  EmprestimosFinalizados EmprestimosFinalizados[]
}

model UsersDashboard {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Roles?   @relation(fields: [role_id], references: [id])
  role_id   Int?
}

model Roles {
  id                  Int     @id @default(autoincrement())
  name                String
  adicionar_livro     Boolean
  remover_livro       Boolean
  confirmar_retirada  Boolean
  confirmar_devolucao Boolean
  adicionar_usuario   Boolean
  remover_usuario     Boolean
  editar_usuario      Boolean
  tirar_relatorio     Boolean

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  users_dashboard UsersDashboard[]
}

model Livros {
  id        Int    @id @default(autoincrement())
  titulo    String @unique
  autor     String
  categoria String
  sinopse   String
  capaUrl   String

  quantidadeDisponivel Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Emprestimos            Emprestimos[]
  Reservas               Reservas[]
  EmprestimosFinalizados EmprestimosFinalizados[]
}

model Emprestimos {
  id Int @id @unique @default(autoincrement())

  livroId Int
  livro   Livros @relation(fields: [livroId], references: [id])

  userId Int
  user   Users @relation(fields: [userId], references: [id])
  status Int   @default(1)

  dataEmprestimo DateTime @default(now())
  dataVencimento DateTime @default(now())
  }

model Reservas {
  id      Int    @id @unique @default(autoincrement())
  livroId Int
  livro   Livros @relation(fields: [livroId], references: [id])

  userId Int
  user   Users @relation(fields: [userId], references: [id])
  status Int   @default(4)

  dataReserva DateTime @default(now())
}

model EmprestimosFinalizados {
  id      Int    @id @unique @default(autoincrement())
  livroId Int
  livro   Livros @relation(fields: [livroId], references: [id])

  userId        Int
  user          Users    @relation(fields: [userId], references: [id])
  status        Int
  dataDevolucao DateTime
}
